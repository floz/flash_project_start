package com.makemepulse.ui.form{	import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.text.TextField;    /**     * @author Nicolas Rajabaly - nicolas@makemepulse.com     */    public class CheckBoxElement extends FormElement {                private var _display : MovieClip;        private var _ticker:DisplayObject;				public static const PLAYED:String='PLAYED';		public static const TICKED:String='TICKED';				private var _method:String;                public function CheckBoxElement(id:String,display:MovieClip,defaultValue:FormDefaultValue,required:Boolean=false,label:TextField=null,method:String=TICKED) {            super( id,[],required,label,defaultValue);            _display=display;			_method=method;			if(_method==TICKED){            	if(_display.getChildByName('ticker')==null) throw new Error('CheckBoxElement Display must have a TextField named ticker');			}            _build();        }                private function _build () : void {        	if(_method==TICKED) _ticker=_display.getChildByName('ticker') as DisplayObject;        	addEventListener( FormElementEvent .VALUE_CHANGE , _handlerValueChanged);            reset();        }                private function _handlerValueChanged (event : FormElementEvent) : void {			if(_method==TICKED){        		_ticker.visible=getValue();			}else{				if(getValue()){					_display.gotoAndPlay( "check" );				}else{					_display.gotoAndPlay( "uncheck" );				}			}        }        override public function isValid () : Boolean {        	if(required==false) return true;        	return getValue();        }                override public function reset():void{        	super.reset();			if(_method==TICKED){        		_ticker.visible=false;        		_ticker.visible=(_defaultValue.value);			}else{				if(Boolean(_defaultValue.value)){					_display.gotoAndPlay( "check" );				}else{					_display.gotoAndPlay( "uncheck" );				}			}        	_display.buttonMode=true;        	_display.mouseChildren=false;			_display.addEventListener(MouseEvent.CLICK, _handlerClick);        }                private function _handlerClick (event : MouseEvent) : void {        	super.hideError();        	setValue(!getValue());        }                override public function setValue(o:*=null,notify:Boolean=true):void{			if(_method==TICKED){        		_ticker.visible=(o) ? o as Boolean : false;			}else{				if(o as Boolean){					_display.gotoAndPlay( "check" );				}else{					_display.gotoAndPlay( "uncheck" );				}			}    		super.setValue(o,notify);    		        }                override public function dispose():void{        	_display.removeEventListener(MouseEvent.CLICK, _handlerClick);        	removeEventListener( FormElementEvent .VALUE_CHANGE , _handlerValueChanged);        	super.dispose();        }              }}