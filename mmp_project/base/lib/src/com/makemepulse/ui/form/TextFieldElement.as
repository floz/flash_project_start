package com.makemepulse.ui.form{	import flash.display.DisplayObjectContainer;	import flash.events.Event;	import flash.events.FocusEvent;	import flash.text.TextField;        /**     * @author Nicolas Rajabaly - nicolas@makemepulse.com     */    public class TextFieldElement extends FormElement {    	    	private var _display:*;    	protected var _field:TextField;    	private var _pwd:Boolean=false;    	private var _restrict:String=null;    	private var _length:int=0;    	private var _tabIndex:int;    	        public function TextFieldElement (tabIndex:int,id:String,display:*,validators : Array,defaultValue:FormDefaultValue,required:Boolean=false,label:TextField=null,pwd:Boolean=false,restrict:String=null,length:int=0) {            super( id,validators,required,label,defaultValue);                       _pwd=pwd;            _tabIndex = tabIndex;            _restrict=restrict;            _length=length;			if(display is DisplayObjectContainer){				 _display=display as DisplayObjectContainer;				if(_display.getChildByName('field')==null) throw new Error('TextFieldElement Display must have a TextField named field');				_field=_display.getChildByName('field') as TextField;			}            if(display is TextField){				 _display=display as TextField;				_field=display as TextField;			}            _build();        }                private function _build () : void {        	        	_field.tabEnabled=true;        	_field.tabIndex=_tabIndex;        	if(_label==null) _label=_field;        	_field.restrict = _restrict;        	_field.displayAsPassword=_pwd;        	_field.maxChars=_length;            reset();        }                override public function reset():void{        	super.reset();        	_field.text='';        	if(_defaultValue.value) _field.text=_defaultValue.value;        	_field.removeEventListener( FocusEvent.FOCUS_IN , _handlerFocusIn);        	_field.removeEventListener( FocusEvent.FOCUS_OUT , _handlerFocusOut);        	_field.removeEventListener( Event.CHANGE, _handlerChange);        	//        	_field.addEventListener( FocusEvent.FOCUS_IN , _handlerFocusIn,false,0,true);        	_field.addEventListener( FocusEvent.FOCUS_OUT , _handlerFocusOut,false,0,true);        	_field.addEventListener( Event.CHANGE, _handlerChange,false,0,true);        }                private function _handlerChange (event : Event) : void {        	setValue(_field.text);        	showError();        }        private function _handlerFocusIn (event : FocusEvent) : void {        	super.hideError();        	if(getValue()==_defaultValue.value) {        		if(_defaultValue.value!=null){        			_field.text=_defaultValue.value;        		}else{        			_field.text='';        		}        	}        }        private function _handlerFocusOut (event : FocusEvent) : void {        	if(_field.text=='') {        		setValue(_defaultValue.value);        	}else{        		setValue(_field.text);        	}        	if(getValue()==_defaultValue.value) {        		if(_defaultValue!=null){        			_field.text=_defaultValue.value;        		}else{        			_field.text='';        		}        	}        }        override public function dispose():void{        	_field.removeEventListener( FocusEvent.FOCUS_IN , _handlerFocusIn);        	_field.removeEventListener( FocusEvent.FOCUS_OUT , _handlerFocusOut);        	_field.removeEventListener( Event.CHANGE, _handlerChange);        	super.dispose();        }                public function get field () : TextField {            return _field;        }                public function get pwd () : Boolean {            return _pwd;        }                public function set pwd (value : Boolean) : void {            _pwd = value;            _field.displayAsPassword=_pwd;        }                public function get restrict () : String {            return _restrict;        }                public function set restrict (value : String) : void {            _restrict = value;            _field.restrict=_restrict;        }                public function get length () : int {            return _length;        }                public function set length (value : int) : void {            _length = value;            _field.maxChars=_length;        }    }}